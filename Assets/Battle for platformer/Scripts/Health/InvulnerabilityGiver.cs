using System.Collections;
using UnityEngine;
using HealthBar;

namespace BattleForPlatformer
{
    [RequireComponent(typeof(Health))]
    [RequireComponent(typeof(SpriteRenderer))]

    public class InvulnerabilityGiver : MonoBehaviour
    {
        [SerializeField, Min(0)] private int _playerLayerNumber;
        [SerializeField, Min(0)] private int _enemyLayerNumber;
        [SerializeField, Min(0)] private float _time;

        [SerializeField] private Color _colorWhenInvulnerable;

        private Health _health;
        private SpriteRenderer _spriteRenderer;
        
        private bool _isInvulnerable;
        private WaitForSeconds _timeInSeconds;
        private Color _defaultColor;

        private void OnValidate()
        {
            _timeInSeconds = new WaitForSeconds(_time);
        }

        private void Awake()
        {
            _health = GetComponent<Health>();
            _spriteRenderer = GetComponent<SpriteRenderer>();
        }

        private void OnEnable()
        {
            _health.DamageReceived += BecomeInvulnerable;
        }

        private void OnDisable()
        {
            _health.DamageReceived -= BecomeInvulnerable;
        }

        private void Start()
        {
            _defaultColor = _spriteRenderer.color;
            Physics2D.IgnoreLayerCollision(_playerLayerNumber, _enemyLayerNumber, false);
        }

        private void BecomeInvulnerable()
        {
            if (_isInvulnerable == false)
                StartCoroutine(InvulnerabilityTimer());
        }

        private IEnumerator InvulnerabilityTimer()
        {
            Physics2D.IgnoreLayerCollision(_playerLayerNumber, _enemyLayerNumber);
            _isInvulnerable = true;
            _spriteRenderer.color = _colorWhenInvulnerable;

            yield return _timeInSeconds;

            Physics2D.IgnoreLayerCollision(_playerLayerNumber, _enemyLayerNumber, false);
            _isInvulnerable = false;
            _spriteRenderer.color = _defaultColor;
        }
    }
}
